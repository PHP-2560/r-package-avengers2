}
}
aa<-get_contributions(candidates)
STOP
aa
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/01_get_contributions.R', echo=TRUE)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/01_get_contributions.R', echo=TRUE)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/01_get_contributions.R', echo=TRUE)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/01_get_contributions.R', echo=TRUE)
# input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
source("./fecScrape/R/get_itemized_contributions.R")
get_contributions<- function(input_candlist) {
contributions<-list()
for (c in 1:dim(input_candlist)[1]) {
cname<-input_candlist$name[1] %>%
strsplit(split = ",") %>%
simplify() %>%
first()
temp<-get_itemized_contributions(data = input_candlist[c])
contributions[[c]]<-temp
names(contributions[[c]])<-paste0("contributions_",cname)
}
if (dim(candidates)[1]==1) {
return(contributions)
}
}
contributions<-get_contributions(candidates)
dim(candidates)[1]
candidates$name[1]
candidates[1]
candidates[1,]
# input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
source("./fecScrape/R/get_itemized_contributions.R")
get_contributions<- function(input_candlist) {
contributions<-list()
for (c in 1:dim(input_candlist)[1]) {
cname<-input_candlist$name[1] %>%
strsplit(split = ",") %>%
simplify() %>%
first()
temp<-get_itemized_contributions(data = input_candlist[c,])
contributions[[c]]<-temp
names(contributions[[c]])<-paste0("contributions_",cname)
}
if (dim(candidates)[1]==1) {
return(contributions)
}
}
contributions<-get_contributions(candidates)
View(contributions)
names(contributions)
class(contributions)
str(contributions)
# input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
source("./fecScrape/R/get_itemized_contributions.R")
get_contributions<- function(input_candlist) {
contributions<-list()
for (c in 1:dim(input_candlist)[1]) {
cname<-input_candlist$name[1] %>%
strsplit(split = ",") %>%
simplify() %>%
first()
temp<-get_itemized_contributions(data = input_candlist[c,])
contributions[[c]]<-temp
names(contributions)[1]<-paste0("contributions_",cname)
}
if (dim(input_candlist)[1]==1) {
return(contributions)
}
}
contributions<-get_contributions(candidates)
View(contributions)
head(contributions[[1]])
View(get_schedule_a)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/01_get_contributions.R', echo=TRUE)
# input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
source("./fecScrape/R/get_itemized_contributions.R")
get_contributions<- function(input_candlist) {
contributions<-list()
for (c in 1:dim(input_candlist)[1]) {
cname<-input_candlist$name[1] %>%
strsplit(split = ",") %>%
simplify() %>%
first()
temp<-get_itemized_contributions(data = input_candlist[c,])
contributions[[c]]<-temp
contributions[[c]]$candidate<-cname
names(contributions)[1]<-paste0("contributions_",cname)
}
if (dim(input_candlist)[1]==1) {
return(contributions)
} else {
}
}
contributions<-get_contributions(candidates)
View(contributions)
View(contributions)
(dim(input_candlist)[1] + 1)
(dim(cnadidates)[1] + 1)
(dim(candidates)[1] + 1)
last(candidates)
length(candidates)
dim(candidates)[1]
contributions[1]
# input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
source("./fecScrape/R/get_itemized_contributions.R")
get_contributions<- function(input_candlist) {
contributions<-list()
for (c in 1:dim(input_candlist)[1]) {
cname<-input_candlist$name[1] %>%
strsplit(split = ",") %>%
simplify() %>%
first()
temp<-get_itemized_contributions(data = input_candlist[c,])
contributions[[c]]<-temp
contributions[[c]]$candidate<-cname
names(contributions)[1]<-paste0("contributions_",cname)
}
if (dim(input_candlist)[1]==1) {
return(contributions)
} else {
contributions[[(dim(input_candlist)[1] + 1)]]<-append(contributions[[1:dim(candidates)[1]]])
}
}
contributions<-get_contributions(candidates)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/week-09-inclass-avengers/00_make.R', echo=TRUE)
# input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
source("./fecScrape/R/get_itemized_contributions.R")
get_contributions<- function(input_candlist) {
contributions<-list()
for (c in 1:dim(input_candlist)[1]) {
cname<-input_candlist$name[1] %>%
strsplit(split = ",") %>%
simplify() %>%
first()
temp<-get_itemized_contributions(data = input_candlist[c,])
contributions[[c]]<-temp
contributions[[c]]$candidate<-cname
names(contributions)[1]<-paste0("contributions_",cname)
}
if (dim(input_candlist)[1]==1) {
return(contributions)
} else {
contributions[[(dim(input_candlist)[1] + 1)]]<-append(contributions[[1:dim(candidates)[1]]])
}
}
contributions<-get_contributions(candidates)
# input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
source("./fecScrape/R/get_itemized_contributions.R")
get_contributions<- function(input_candlist) {
contributions<-list()
for (c in 1:dim(input_candlist)[1]) {
cname<-input_candlist$name[c] %>%
strsplit(split = ",") %>%
simplify() %>%
first()
temp<-get_itemized_contributions(data = input_candlist[c,])
contributions[[c]]<-temp
contributions[[c]]$candidate<-cname
names(contributions)[c]<-paste0("contributions_",cname)
}
if (dim(input_candlist)[1]==1) {
return(contributions)
} else {
# contributions[[(dim(input_candlist)[1] + 1)]]<-append(contributions[[1:dim(candidates)[1]]]) # to finish
}
}
contributions<-get_contributions(candidates)
#' Search for political candidates in FEC
#'
#' This function constructs searches for candidates listed in the FEC based on input parameters.
#' @param api_key An API key required to use OpenFEC
#' @param state A two-letter acronym which specifies the state to search (e.g., "TX")
#' @param election_year The year the election occured
#' @param office Specifies which office the candidate ran for: "S" = Senate, "H" = House, "G" = Governor, "P" = President
#' @param candidate_status Specifies whether the candidate is active during that election. Defaults to "C" for current.
#'
#' @import purrr dplyr magrittr
#'
#' @export
#Construct FEC URL to get data from
query_candidate_list <- function(api_key = NULL, state = NULL, election_year = NULL, office = NULL, candidate_status = "C") {
if (is.null(api_key)) {
stop('An API key is required. Obtain one at https://api.data.gov/signup.')
}
#1: Find candidates
query_param <- list(
api_key = api_key,
state = state,
election_year = election_year,
office = office,
candidate_status = candidate_status,
page = 1,
per_page = 100
)
query_param <- query_param[!sapply(query_param, is.null)] # fill in query inputs from the function inputs
#Set up for responses to our requests.
responses <- list()
responses[[1]] <- query_openfec(path = "/candidates/search/", query_parameters = query_param)
total_pages <- responses[[1]][["pagination"]][["pages"]]
total_count <- responses[[1]][["pagination"]][["count"]]
message(paste0("Candidates found: ", total_count))
#Automate Pagination, only run if necessary
if(total_pages > 1){
message(paste0("There are ",total_pages," pages of results to get."))
for(i in 2:total_pages){
if(i == 2 | i %% 10 == 0 | i == total_pages){
message("On page ", i,"/",total_pages)
}
### Rate Limit Controls
Sys.sleep(.5) #With an upgraded key, max limit is 120 calls per minute.
#Update the page in our query and send another request
query_param$page <- i
responses[[i]] <- query_openfec(path = "/candidates/search/", query_parameters = query_param)
}
}
# CLEAN RESPONSES RETRIEVED
tidy_candidates <- purrr::map(responses, function(x) x$results) %>%
unlist(recursive = F) %>%
tibble::tibble(
load_date = map_chr(. , "load_date", .default = NA),
last_file_date = map_chr(. , "last_file_date", .default = NA),
candidate_id = map_chr(. , "candidate_id", .default = NA),
election_years = map(. , "election_years", .default = NA),
party = map_chr(. , "party", .default = NA),
candidate_status = map_chr(. , "candidate_status", .default = NA),
office_full = map_chr(. , "office_full", .default = NA),
state = map_chr(. , "state", .default = NA),
federal_funds_flag = map_lgl(. , "federal_funds_flag", .default = NA),
has_raised_funds = map_lgl(. , "has_raised_funds", .default = NA),
office = map_chr(. , "office", .default = NA),
election_districts = map(. , "election_districts", .default = NA),
name = map_chr(., "name", .default = NA),
principal_committees = map(. , "principal_committees"),
district_number = map_int(. , "district_number", .default = NA),
cycles = map(. , "cycles", .default = NA),
incumbent_challenge = map_chr(. , "incumbent_challenge", .default = NA),
party_full = map_chr(. , "party_full", .default = NA),
first_file_date = map_chr(. , "first_file_date", .default = NA),
active_through = map_int(. , "active_through", .default = NA),
incumbent_challenge_full = map_chr(. , "incumbent_challenge_full", .default = NA),
last_f2_date = map_chr(. , "last_f2_date", .default = NA),
district = map_chr(. , "district", .default = NA)
) %>%
#for candidates with no principal committee, we still want a list filled with NA values so other functions don't freak.
tidyr::replace_na(list(principal_committees = list(list(list(organization_type_full = NA,
designation = NA,
state = NA,
cycles = NA,
party_full = NA,
committee_type_full = NA,
organization_type = NA,
committee_id = NA,
first_file_date = NA,
party = NA,
committee_type = NA,
last_file_date = NA,
candidate_id = NA,
designation_full = NA,
last_f1_date = NA,
treasurer_name = NA,
name = NA)))))
return(tidy_candidates)
}
input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
input_state <- "WY"
# input_candidates <- c("Barrasso, John", "Trauner, Gary")
input_year<-2018
input_office <- "S"
aaa<-query_candidate_list(api_key = input_api, state = input_state, office= input_office, election_year = input_year)
View(aaa)
#' @param input_api
#' @param input_state
#' @param input_year
#' @param input_office
#'
#' @export
# Initialize libraries
required_packages <- c("httr", "rvest", "jsonlite", "dplyr", "stringr", "purrr", "tidyr") # list of packages required
# Check if any listed packages are not installed
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
# Install packages_new if it's not empty
if(length(new_packages)) install.packages(new_packages)
# Load packages
lapply(required_packages, library, character.only = TRUE)
get_candidates<-function(input_api, input_state, input_year, input_office) {
source("./fecScrape/R/query_openfec.R")
source("01a_get_candlist.R")
source("01b_choose_cand.R")
return(candidates)
}
my_candidates<-get_candidates(input_api = "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz",
input_state = "WY",
input_year = 2018,
input_office = "S")
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/01_get_candidate.R', echo=TRUE)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/01_get_candidate.R', echo=TRUE)
#' @param input_api
#' @param input_state
#' @param input_year
#' @param input_office
#'
#' @export
# Initialize libraries
required_packages <- c("httr", "rvest", "jsonlite", "dplyr", "stringr", "purrr", "tidyr") # list of packages required
# Check if any listed packages are not installed
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
# Install packages_new if it's not empty
if(length(new_packages)) install.packages(new_packages)
# Load packages
lapply(required_packages, library, character.only = TRUE)
source("./fecScrape/R/query_openfec.R")
source("01a_get_candlist.R")
source("01b_choose_cand.R")
get_candidates<-function(input_api, input_state, input_year, input_office) {
candlist<-get_fec(state = input_state,
election_year = input_year,
api_key = input_api,
office = input_office)
showtable<-candlist%>%
select(c(name, party, committee_name))
print(showtable)
candidates<-choose_cand(candlist)
return(candidates)
}
my_candidates<-get_candidates(input_api = "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz",
input_state = "WY",
input_year = 2018,
input_office = "S")
#' @param input_api
#' @param input_state
#' @param input_year
#' @param input_office
#'
#' @export
# Initialize libraries
required_packages <- c("httr", "rvest", "jsonlite", "dplyr", "stringr", "purrr", "tidyr") # list of packages required
# Check if any listed packages are not installed
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
# Install packages_new if it's not empty
if(length(new_packages)) install.packages(new_packages)
# Load packages
lapply(required_packages, library, character.only = TRUE)
source("./fecScrape/R/query_openfec.R")
source("01a_get_candlist.R")
source("01b_choose_cand.R")
get_candidates<-function(input_api, input_state, input_year, input_office) {
candlist<-get_fec(state = input_state,
election_year = input_year,
api_key = input_api,
office = input_office)
return(candlist)
}
my_candidates<-get_candidates(input_api = "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz",
input_state = "WY",
input_year = 2018,
input_office = "S")
#' @param input_api
#' @param input_state
#' @param input_year
#' @param input_office
#'
#' @export
# Initialize libraries
required_packages <- c("httr", "rvest", "jsonlite", "dplyr", "stringr", "purrr", "tidyr") # list of packages required
# Check if any listed packages are not installed
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
# Install packages_new if it's not empty
if(length(new_packages)) install.packages(new_packages)
# Load packages
lapply(required_packages, library, character.only = TRUE)
source("./fecScrape/R/query_openfec.R")
source("01a_get_candlist.R")
source("01b_choose_cand.R")
get_candidates<-function(input_api, input_state, input_year, input_office) {
candlist<-get_fec(state = input_state,
election_year = input_year,
api_key = input_api,
office = input_office)
return(candlist)
}
my_candidates<-get_candidates(input_api = "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz",
input_state = "WY",
input_year = 2018,
input_office = "S")
#' @param input_api
#' @param input_state
#' @param input_year
#' @param input_office
#'
#' @export
# Initialize libraries
required_packages <- c("httr", "rvest", "jsonlite", "dplyr", "stringr", "purrr", "tidyr") # list of packages required
# Check if any listed packages are not installed
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
# Install packages_new if it's not empty
if(length(new_packages)) install.packages(new_packages)
# Load packages
lapply(required_packages, library, character.only = TRUE)
source("./fecScrape/R/query_openfec.R")
source("01a_get_candlist.R")
source("01b_choose_cand.R")
get_candidates<-function(input_api, input_state, input_year, input_office) {
candlist<-get_fec(state = input_state,
election_year = input_year,
api_key = input_api,
office = input_office)
return(candlist)
}
my_candidates<-get_candidates(input_api = "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz",
input_state = "WY",
input_year = 2016,
input_office = "S")
#' @param input_api
#' @param input_state
#' @param input_year
#' @param input_office
#'
#' @export
# Initialize libraries
required_packages <- c("httr", "rvest", "jsonlite", "dplyr", "stringr", "purrr", "tidyr") # list of packages required
# Check if any listed packages are not installed
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
# Install packages_new if it's not empty
if(length(new_packages)) install.packages(new_packages)
# Load packages
lapply(required_packages, library, character.only = TRUE)
source("./fecScrape/R/query_openfec.R")
source("01a_get_candlist.R")
source("01b_choose_cand.R")
get_candidates<-function(input_api, input_state, input_year, input_office) {
candlist<-get_fec(state = input_state,
election_year = input_year,
api_key = input_api,
office = input_office)
return(candlist)
}
my_candidates<-get_candidates(input_api = "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz",
input_state = "WY",
input_year = 2010,
input_office = "S")
#' @param input_api
#' @param input_state
#' @param input_year
#' @param input_office
#'
#' @export
# Initialize libraries
required_packages <- c("httr", "rvest", "jsonlite", "dplyr", "stringr", "purrr", "tidyr") # list of packages required
# Check if any listed packages are not installed
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
# Install packages_new if it's not empty
if(length(new_packages)) install.packages(new_packages)
# Load packages
lapply(required_packages, library, character.only = TRUE)
source("./fecScrape/R/query_openfec.R")
source("01a_get_candlist.R")
source("01b_choose_cand.R")
get_candidates<-function(input_api, input_state, input_year, input_office) {
candlist<-get_fec(state = input_state,
election_year = input_year,
api_key = input_api,
office = input_office)
return(candlist)
}
my_candidates<-get_candidates(input_api = "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz",
input_state = "WY",
input_year = 2018,
input_office = "S")
getwd()
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/query_candidate_list.R', echo=TRUE)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/query_candidate_list.R', echo=TRUE)
View(candidates)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/query_candidate_list.R', echo=TRUE)
View(candidates)
# input_api <- "jFTYk34OsWkFoEHLcUDa7G1Ax4GCyhJyAgCwB8oz"
source("./fecScrape/R/get_itemized_contributions.R")
get_contributions<- function(input_candlist) {
contributions<-list()
for (c in 1:dim(input_candlist)[1]) {
cname<-input_candlist$name[c] %>%
strsplit(split = ",") %>%
simplify() %>%
first()
temp<-get_itemized_contributions(data = input_candlist[c,])
contributions[[c]]<-temp
contributions[[c]]$candidate<-cname
names(contributions)[c]<-paste0("contributions_",cname)
}
if (dim(input_candlist)[1]==1) {
return(contributions)
} else {
# contributions[[(dim(input_candlist)[1] + 1)]]<-append(contributions[[1:dim(candidates)[1]]]) # to finish
}
}
contributions<-get_contributions(candidates)
View(candidates)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/query_candidate_list.R', echo=TRUE)
View(candidates)
View(candidates)
View(candidates)
View(candidates)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/query_candidate_list.R', echo=TRUE)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/query_candidate_list.R', echo=TRUE)
View(candidates)
View(candidates)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/query_candidate_list.R', echo=TRUE)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/query_candidate_list.R', echo=TRUE)
View(candidates)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/get_contributions_all.R', echo=TRUE)
source('C:/Users/gabriel/Dropbox (Brown)/III_year/PHP2560/r-package-avengers2/fecScrape/R/get_contributions_all.R', echo=TRUE)
View(contributions)
